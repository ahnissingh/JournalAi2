package com.ahnis.journalai.ai.analysis.service;

import com.ahnis.journalai.ai.analysis.dto.MoodReportResponse;
import com.ahnis.journalai.ai.analysis.entity.MoodReportEntity;
import com.ahnis.journalai.ai.analysis.repository.ReportRepository;
import com.ahnis.journalai.notification.service.NotificationService;
import com.ahnis.journalai.user.entity.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDate;

@Slf4j
@Service
@RequiredArgsConstructor
public class ReportService {
    private final JournalAnalysisService journalAnalysisService;
    private final ReportRepository reportRepository;
    private final NotificationService notificationService;


    @Async
    public void sendReport(User user, MoodReportResponse report) {
        log.info("Sending report to user: {}", user.getUsername());
        notificationService.sendEmailReport("ahnisaneja@gmail.com", report);
    }

    @Async
    public void generateReport(User user, Instant startDate, Instant endDate) {
        try {
            // Analyze journals between startDate and endDate
            MoodReportResponse moodReport = journalAnalysisService.analyzeUserMood(user.getId() ,user.getPreferences(), startDate, endDate).join();

            // Save the report
            var reportEntity = buildReportEntity(user, moodReport);
            reportRepository.save(reportEntity);


            this.sendReport(user, moodReport);
            log.info("Report generated by method2 of reportService and saved for user: {}", user.getUsername());
        } catch (Exception e) {
            log.error("Failed to generate report for user: {}", user.getUsername(), e);
            throw new RuntimeException("Failed to generate report", e);
        }
    }

    private MoodReportEntity buildReportEntity(User user, MoodReportResponse moodReport) {
        return MoodReportEntity.builder()
                .userId(user.getId())
                .reportDate(LocalDate.now())
                .moodSummary(moodReport.moodSummary())
                .keyEmotions(moodReport.keyEmotions())
                .contextualInsights(moodReport.contextualInsights())
                .recommendations(moodReport.recommendations())
                .build();


    }
}
